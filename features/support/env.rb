# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
require 'simplecov'
require 'factory_girl_rails'
SimpleCov.start

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

#create database
Before do
  gig_requests = [{:name => 'John Smith', :address => '111 Juniper Dr', :phone => '999-999-9999', :email => 'john.smith69@gmail.com', :gig_date => '01-Jan-2018', :gig_time => '08:30', :gig_duration => 3, :light_rent => false, :speaker_rent => true,  :dj_preferred => "Clayton Wells", :approval => false},
                  {:name => 'Samoa Joe', :address => '999 Coquina Crossing', :phone => '123-456-7890', :email => 'heisfat@gmail.com', :gig_date => '02-Feb-2018', :gig_time => '22:30', :gig_duration => 2, :light_rent => false, :speaker_rent => false, :dj_preferred => "Jcroc", :approval => false}]
  
  gig_requests.each do |gig_request|
    GigRequest.create!(gig_request)
  end
  
  user_test = [{:uid => '113054678615933156222'}]
  User.create!(user_test)
  
end


# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#:uid => '113054678615933156222',

FactoryGirl.define do
    factory :user do
      uid "113054678615933156222"
    end
end
# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

#Before('@omniauth_test') do
#  OmniAuth.config.test_mode = true
#  Capybara.default_host = 'http://example.com'
#
#  OmniAuth.config.add_mock(:google, {
#    :uid => '113054678615933156222',
#    :info => {
#      :name => 'validuser',
#    }
#  })
#
#  OmniAuth.config.add_mock(:google, {
#    :uid => '113055578615933142122',
#    :info => {
#      :name => 'invaliduser'
#    }
#  })
#end
#
#After('@omniauth_test') do
#  OmniAuth.config.test_mode = false
#end

